class Solution {
public:
	void dfs(int v, vector<vector<int>>&g, vector<int>&cc, vector<int>&vis) {
		vis[v] = 1;
		cc.push_back(v);
		for (auto &u : g[v]) {
			if (!vis[u]) {
				dfs(u, g, cc, vis);
			}
		}
	}
	int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
		int n = graph.size();
		vector<int>f(n);
		vector<vector<int>>g(n);
		for (int x : initial) {
			f[x] = 1;
		}
		for (int i = 0; i < n; i++) {
			for (int j = i + 1; j < n; j++) {
				if (graph[i][j]) {
					g[i].push_back(j);
					g[j].push_back(i);
				}
			}
		}
		vector<int>vis(n, 0);
		vector<pair<int, int>>p;
		for (int i = 0; i < n; i++) {
			if (!vis[i]) {
				vector<int>cc;
				dfs(i, g, cc, vis);
				vector<int>pos;
				for (int j : cc) {
					if (f[j]) {
						pos.push_back(j);
					}
				}
				int s = pos.size();
				sort(begin(pos), end(pos));
				if (s == 1) {
					p.push_back({cc.size(), pos[0]});
				}
				else if (s >= 2) {
					p.push_back({0, pos[0]});
				}
			}
		}
		sort(begin(p), end(p));
		int mx = p.back().first;
		int ans = 1e9;
		for (int i = 0; i < p.size(); i++) {
			if (p[i].first == mx) {
				ans = min(ans, p[i].second);
			}
		}
		return ans;
	}
};